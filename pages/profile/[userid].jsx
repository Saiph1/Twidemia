import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import Sidebar from "@/components/Sidebar";
import Feed from "@/components/Feed";
import Widgets from "@/components/Widgets";
import ProfileContainer from "@/components/ProfileContainer";
import { useSession, signIn } from "next-auth/react";
import Slider from "@mui/material/Slider";
import dbConnect from "../../lib/dbConnect";

export default function Home(props) {
  const { status, data: session } = useSession({
    required: true,
    onUnauthenticated() {
      signIn();
    },
  });
  const [load, setload] = useState(false);
  const [update, setupdate] = useState(false);
  const [userdata, setUserdata] = useState({
    username: "Rendering...",
    email: "Rendering...",
    userId: "Rendering...",
    password: "Rendering...",
    faculty: "Rendering...",
    followerlist: [],
    followinglist: [],
    year: 0, 
  });
  // fetching user data for profile
  useEffect(()=>{
    console.log(props.id);
    fetch("/api/user/"+props.id)
    .then((res)=>res.json())
    .then((data)=>{setUserdata(data.data); console.log(userdata)})
    .then(()=>setload(true))
  }, [session, update, load]);

  function updates(){
    setupdate(!update);
    setload(false);
  }
  if (session) { 
    return (
      <>
        <Head>
          <title>Twidemia</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/Twidemia-logo.png" />
        </Head>

        <main className="flex min-h-screen max-w-7xl mx-auto">
          {/* Sidebar */}
          <Sidebar user={session.user} update={updates} />
          <ProfileContainer update_parent={updates} user={userdata} myprofile={(session.user.userId === props.id)} loaded={load}/>
          <Widgets update_page={updates}/>
        </main>
      </>
    );
  }
}

export async function getServerSideProps(context) {
    let isDbConnected = false;

    try {
        // Try to connect the DB.
        if (await dbConnect()) isDbConnected = true;
    } catch (e) {
        // If it cannot connect to DB, output log to console by using error flag.
        console.error(e)
    }

    let id = context.query.userid;
    // Return all post and login status by props.
    return {props: {isDbConnected, id}};
}